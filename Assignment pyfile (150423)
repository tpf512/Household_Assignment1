import numpy as np
from scipy.optimize import minimize,  NonlinearConstraint
import warnings
warnings.filterwarnings("ignore", message="delta_grad == 0.0. Check if the approximated function is linear.") # turn of annoying warning

from EconModel import EconModelClass

from consav.grids import nonlinspace
from consav.linear_interp import interp_2d

class DynLaborFertModelClass(EconModelClass):

    def settings(self):
        """ fundamental settings """

        pass

    def setup(self):
        """ set baseline parameters """

        # unpack
        par = self.par

        par.T = 10 # time periods
        
        # preferences
        par.rho = 0.98 # discount factor

        par.beta_0 = 0.1 # weight on labor dis-utility (constant)
        par.beta_1 = 0.05 # additional weight on labor dis-utility (children)
        par.eta = -2.0 # CRRA coefficient
        par.gamma = 2.5 # curvature on labor hours 

        # income
        par.alpha = 0.1 # human capital accumulation 
        par.w = 1.0 # wage base level
        par.tau = 0.1 # labor income tax

        par.theta = 0. # question 3
        par.phi = 0. # question 4
        par.stoch_s = 0 #question 6

        # children
        par.p_birth = 0.1

        # spouse
        par.p_spouse = 0.8 # question 6

        # saving
        par.r = 0.02 # interest rate

        # grids
        par.a_max = 5.0 # maximum point in wealth grid
        par.a_min = -10.0 # minimum point in wealth grid
        par.Na = 50 #70 # number of grid points in wealth grid 
        
        par.k_max = 20.0 # maximum point in wealth grid
        par.Nk = 20 #30 # number of grid points in wealth grid    

        par.Nn = 2 # number of children

        par.Ns = 1 # number of spouse states

        # simulation
        par.simT = par.T # number of periods
        par.simN = 1_000 # number of individuals


    def allocate(self):
        """ allocate model """

        # unpack
        par = self.par
        sol = self.sol
        sim = self.sim

        par.simT = par.T
        
        # a. asset grid
        par.a_grid = nonlinspace(par.a_min,par.a_max,par.Na,1.1)

        # b. human capital grid
        par.k_grid = nonlinspace(0.0,par.k_max,par.Nk,1.1)

        # c. number of children grid
        par.n_grid = np.arange(par.Nn)

        # d. spouse grid
        if par.stoch_s == 1:
            par.Ns += 1 
            par.s_grid = np.arange(par.Ns)
            par.phi = 1.0
            par.theta = 0.05

            shape = (par.T,par.Ns,par.Nn,par.Na,par.Nk)
            sol.c = np.nan + np.zeros(shape)
            sol.h = np.nan + np.zeros(shape)
            sol.V = np.nan + np.zeros(shape)
        else: 
            par.s_grid = np.array([par.Ns])
            par.phi = 0.
            par.theta = 0.

            shape = (par.T,par.Ns,par.Nn,par.Na,par.Nk)
            sol.c = np.nan + np.zeros(shape)
            sol.h = np.nan + np.zeros(shape)
            sol.V = np.nan + np.zeros(shape) 
    
        # e. simulation arrays
        shape = (par.simN,par.simT)
        sim.c = np.nan + np.zeros(shape)
        sim.h = np.nan + np.zeros(shape)
        sim.a = np.nan + np.zeros(shape)
        sim.k = np.nan + np.zeros(shape)
        sim.n = np.zeros(shape,dtype=np.int_)
        sim.s = np.zeros(shape,dtype=np.int_)

        # f. draws used to simulate child and spouse arrival
        np.random.seed(9210)
        sim.draws_uniform_kids = np.random.uniform(size=shape)

        sim.draws_uniform_spouse = np.random.uniform(size=shape)

        # g. initialization
        sim.a_init = np.zeros(par.simN)
        sim.k_init = np.zeros(par.simN)
        sim.n_init = np.zeros(par.simN,dtype=np.int_)
        sim.s_init = np.zeros(par.simN,dtype=np.int_)

        # h. vector of wages. Used for simulating elasticities
        par.w_vec = par.w * np.ones(par.T)


    ############
    # Solution #
    def solve(self):

        # a. unpack
        par = self.par
        sol = self.sol
        
        # b. solve last period
        
        # c. loop backwards (over all periods)
        for t in reversed(range(par.T)):

            # i. loop over state variables: number of children, human capital and wealth in beginning of period
            for i_s,spouse in enumerate(par.s_grid):
                for i_n,kids in enumerate(par.n_grid):
                    for i_a,assets in enumerate(par.a_grid):
                        for i_k,capital in enumerate(par.k_grid):
                            idx = (t,i_s,i_n,i_a,i_k)

                            # ii. find optimal consumption and hours at this level of wealth in this period t.

                            if t==par.T-1: # last period
                                obj = lambda x: self.obj_last(x[0],assets,capital,kids,spouse,t)

                                constr = lambda x: self.cons_last(x[0],assets,capital,kids,spouse,t)
                                nlc = NonlinearConstraint(constr, lb=0.0, ub=np.inf,keep_feasible=True)

                                # call optimizer
                                hours_min = - (assets + par.phi*spouse*(0.1+0.01*t) - par.theta*kids) / self.wage_func(capital,t) + 1.0e-5 # minimum amout of hours that ensures positive consumption
                                hours_min = np.maximum(hours_min,2.0)
                                init_h = np.array([hours_min]) if i_a==0 else np.array([sol.h[t,i_s,i_n,i_a-1,i_k]]) # initial guess on optimal hours

                                res = minimize(obj,init_h,bounds=((0.0,np.inf),),constraints=nlc,method='trust-constr')

                                # store results
                                sol.c[idx] = self.cons_last(res.x[0],assets,capital,kids,spouse,t)
                                sol.h[idx] = res.x[0]
                                sol.V[idx] = -res.fun

                            else:
                                
                                # objective function: negative since we minimize
                                obj = lambda x: - self.value_of_choice(x[0],x[1],assets,capital,kids,spouse,t)  

                                # bounds on consumption 
                                lb_c = 0.000001 # avoid dividing with zero
                                ub_c = np.inf

                                # bounds on hours
                                lb_h = 0.0
                                ub_h = np.inf 

                                bounds = ((lb_c,ub_c),(lb_h,ub_h))
                    
                                # call optimizer
                                init = np.array([lb_c,1.0]) if (i_s == 0 & i_n == 0 & i_a==0 & i_k==0) else res.x  # initial guess on optimal consumption and hours
                                res = minimize(obj,init,bounds=bounds,method='L-BFGS-B') 
                            
                                # store results
                                sol.c[idx] = res.x[0]
                                sol.h[idx] = res.x[1]
                                sol.V[idx] = -res.fun

    # last period
    def cons_last(self,hours,assets,capital,kids,spouse,t):
        #par = self.par

        income = self.inc_func(capital,hours,kids,spouse,t) 
        cons = assets + income
        return cons

    def obj_last(self,hours,assets,capital,kids,spouse,t):
        cons = self.cons_last(hours,assets,capital,kids,spouse,t)
        return - self.util(cons,hours,kids)    

    # earlier periods
    def value_of_choice(self,cons,hours,assets,capital,kids,spouse,t):

        # a. unpack
        par = self.par
        sol = self.sol

        # b. penalty for violating bounds. 
        penalty = 0.0
        if cons < 0.0:
            penalty += cons*1_000.0
            cons = 1.0e-5
        if hours < 0.0:
            penalty += hours*1_000.0
            hours = 0.0

        # c. utility from consumption
        util = self.util(cons,hours,kids)
        
        # d. *expected* continuation value from savings
        income = self.inc_func(capital,hours,kids,spouse,t) 
        a_next = (1.0+par.r)*(assets + income - cons)
        k_next = capital + hours

        # HARD CODE
        # if par.stoch_s == 1:

        #     if spouse == 1: # if spouse is present in period t --> possibility of kids 

        #             # Period t+1 possibilities

        #             #1) No birth, no spouse
        #             kids_next = kids
        #             V_next = sol.V[t+1,0,kids_next]
        #             V_next_no_birth_no_spouse = interp_2d(par.a_grid,par.k_grid,V_next,a_next,k_next)

        #             #2) No birth, spouse
        #             kids_next = kids
        #             V_next = sol.V[t+1,1,kids_next]
        #             V_next_no_birth_spouse = interp_2d(par.a_grid,par.k_grid,V_next,a_next,k_next)

        #             # already kids
        #             if (kids>=(par.Nn-1)):
        #             #3) Already children, no spouse
        #                 V_next_birth_no_spouse = V_next_no_birth_no_spouse 
        #             #4) Already chuldren, spouse
        #                 V_next_birth_spouse = V_next_no_birth_spouse 

        #             #5) Birth, no spouse 
        #             else: 
        #                 kids_next = kids + 1
        #                 V_next = sol.V[t+1,0,kids_next]
        #                 V_next_birth_no_spouse = interp_2d(par.a_grid,par.k_grid,V_next,a_next,k_next)
                    
        #             #6) Birth, spouse
        #                 V_next = sol.V[t+1,1,kids_next]
        #                 V_next_birth_spouse = interp_2d(par.a_grid,par.k_grid,V_next,a_next,k_next)

        #     else: # if spouse is not present in period t --> no kids

        #         # Period t+1 possibilities

        #         # 7) No birth, no spouse
        #         kids_next = kids 
        #         V_next = sol.V[t+1,0,kids_next]
        #         V_next_no_birth_no_spouse = interp_2d(par.a_grid,par.k_grid,V_next,a_next,k_next)

        #         # 8) No birth, spouse
        #         V_next = sol.V[t+1,1,kids_next]
        #         V_next_no_birth_spouse = interp_2d(par.a_grid,par.k_grid,V_next,a_next,k_next)

        #         # 9) Birth, no spouse (can't happen)
        #         V_next_birth_no_spouse = V_next_no_birth_no_spouse

        #         # 10) Birth, spouse (can't happen) ps*pn
        #         V_next_birth_spouse = V_next_no_birth_spouse 

        #         EV_next = par.p_birth*par.p_spouse * V_next_birth_spouse + par.p_birth*(1-par.p_spouse)*V_next_birth_no_spouse + (1-par.p_birth)*par.p_spouse*V_next_no_birth_spouse + (1-par.p_birth)*(1-par.p_spouse)*V_next_no_birth_no_spouse

        # LOOP CODE
        if par.stoch_s == 1: #Question 6: if stochastic spouse is on

            EV_next = 0.0 #loop through grid

            num_birth = 2 if kids<par.Nn-1 and spouse == 1 else 1 # Iterate over birth=0 and birth=1 if there are no kids and if there is a spouse in period t. Otherwise iterate over birth=0
            probs_n = [1-par.p_birth,par.p_birth] # Vector with prob of birth and prob of no birth

            num_spouse = 2 # Iterate over spouse_next=0 and spouse_next=1
            probs_s = [1-par.p_spouse,par.p_spouse] # Vector with prob of spouse and prob of no spouse in next period 

            for s_next in range(num_spouse): # Iterate over possibility of spouse=0 and spouse=1 in period t+1
                p_s_next = probs_s[s_next] # Set probability 
                for birth in range(num_birth): # Iterate over possibilty of child=0 and child=1 in period t+1
                    p_n_next = probs_n[birth] if num_birth > 1 else 1.0 # Imposed that we can only have a child if a spouse is present in period t and only have one child 
                    n_next = kids + birth 
                    V_next = sol.V[t+1,s_next,n_next] # Determine value in period t+1 
                    V_next_interp = interp_2d(par.a_grid,par.k_grid,V_next,a_next,k_next) # Interpolate

                    EV_next = EV_next + p_s_next * p_n_next * V_next_interp #Expected value in period t+1 based on conditional probabilities
        
        else: # Baseline model: if stochastic spouse is not turned on. 

             # add another loop for wife 
            EV_next = 0.0 #loop through grid
            num_birth = 2 if kids<par.Nn-1 else 1 # Iterate over birth=0 and birth=1 if there are no kids in period t. Otherwise iterate over birth=0.
            probs = [1-par.p_birth,par.p_birth] # Vector with prob of birth and prob of no birth
        
            for birth in range(num_birth):
                p_n_next = probs[birth] if num_birth > 1 else 1.0 # Imposed such that individuals can only have one child 
                n_next = kids + birth 
                V_next = sol.V[t+1,0,n_next] # Always a spouse who contributes with 0 income = no spouse 
                V_next_interp = interp_2d(par.a_grid,par.k_grid,V_next,a_next,k_next) 

                EV_next = EV_next + p_n_next * V_next_interp #Expected value in period t+1 based on conditional probabilities

        # e. return value of choice (including penalty)
        return util + par.rho * EV_next + penalty

    def util(self,c,hours,kids):
        par = self.par

        beta = par.beta_0 + par.beta_1*kids

        return (c)**(1.0+par.eta) / (1.0+par.eta) - beta*(hours)**(1.0+par.gamma) / (1.0+par.gamma) 

    def wage_func(self,capital,t):
        # after tax wage rate
        par = self.par

        return (1.0 - par.tau )* par.w_vec[t] * (1.0 + par.alpha * capital)
    
    def inc_func(self,capital,hours,kids,spouse,t):

        par = self.par 
        yt = par.phi*spouse*(0.1+0.01*t)
        kid_cost = par.theta*kids 
        income = self.wage_func(capital,t)*hours + yt - kid_cost

        return income

    ##############
    # Simulation #
    def simulate(self):

        # a. unpack
        par = self.par
        sol = self.sol
        sim = self.sim

        # b. loop over individuals and time
        for i in range(par.simN):

            # i. initialize states
            sim.s[i,0] = sim.s_init[i]
            sim.n[i,0] = sim.n_init[i]
            sim.a[i,0] = sim.a_init[i]
            sim.k[i,0] = sim.k_init[i]

            for t in range(par.simT):

                # ii. interpolate optimal consumption and hours
                idx_sol = (t,sim.s[i,t],sim.n[i,t])
                sim.c[i,t] = interp_2d(par.a_grid,par.k_grid,sol.c[idx_sol],sim.a[i,t],sim.k[i,t])
                sim.h[i,t] = interp_2d(par.a_grid,par.k_grid,sol.h[idx_sol],sim.a[i,t],sim.k[i,t])

                # iii. store next-period states
                if t<par.simT-1:
                    income = self.inc_func(sim.k[i,t],sim.h[i,t],sim.s[i,t],sim.n[i,t],t)
                    sim.a[i,t+1] = (1+par.r)*(sim.a[i,t] + income - sim.c[i,t])
                    sim.k[i,t+1] = sim.k[i,t] + sim.h[i,t]

                    if par.stoch_s == 1: # Stochastic spouse model 
                        spouse = 0 
                        if ((sim.draws_uniform_spouse[i,t] <= par.p_spouse)):
                            spouse = 1 
                        sim.s[i,t+1] = spouse 

                        birth = 0 
                        if ((sim.draws_uniform_kids[i,t] <= par.p_birth) & (spouse == 1) & (sim.n[i,t]<(par.Nn-1))):
                            birth = 1
                        sim.n[i,t+1] = sim.n[i,t] + birth

                    else: # Baseline model
                        birth = 0 
                        if ((sim.draws_uniform_kids[i,t] <= par.p_birth) & (sim.n[i,t]<(par.Nn-1))):
                            birth = 1
                        sim.n[i,t+1] = sim.n[i,t] + birth
                    